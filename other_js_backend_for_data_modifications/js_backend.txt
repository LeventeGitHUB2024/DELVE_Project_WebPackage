//Egyszer≈± szerver l√©trehoz√°sa (Express + SQLite)

// index.js
const express = require('express');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();
const db = new sqlite3.Database('./data.db');

app.use(cors());
app.use(bodyParser.json());

// Inicializ√°l√°s
db.run(`CREATE TABLE IF NOT EXISTS saves (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user TEXT,
  data TEXT
)`);

// P√©lda: ment√©s felt√∂lt√©se
app.post('/save', (req, res) => {
  const { user, data } = req.body;
  db.run(`INSERT INTO saves (user, data) VALUES (?, ?)`, [user, JSON.stringify(data)], function (err) {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ id: this.lastID });
  });
});

// Lek√©r√©s
app.get('/save/:id', (req, res) => {
  db.get(`SELECT * FROM saves WHERE id = ?`, [req.params.id], (err, row) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(row);
  });
});

app.listen(3000, () => console.log('API fut a http://localhost:3000 c√≠men'));


üåê Godot oldali p√©lda (GDScript):
gdscript
M√°sol√°s
Szerkeszt√©s
var url = "http://localhost:3000/save"
var http = HTTPRequest.new()
add_child(http)

func save_game():
    var save_data = {"user": "player1", "data": {"level": 3, "score": 2500}}
    http.request(url, [], true, HTTPClient.METHOD_POST, to_json(save_data))


‚òÅÔ∏è Felt√∂lt√©s szerverre (Nethely)
A Nethely val√≥sz√≠n≈±leg nem t√°mogat Node.js alkalmaz√°sok futtat√°s√°t (csak PHP/Apache). Node.js-hez ink√°bb VPS vagy valamilyen felh≈ës szolg√°ltat√°s kell (pl. Render.com, Railway, Fly.io, Vercel, DigitalOcean, Hetzner).

De lok√°lisan fejlesztheted Node.js-ben, azt√°n eld√∂nt√∂d:

Node.js alkalmaz√°st szerverre teszel (VPS)

vagy visszaviszed PHP-be a logik√°t